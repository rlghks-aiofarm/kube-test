# name: Test Submodules

# on:
#   push:
#     branches:
#       - main

# jobs:
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       # 레포지토리 체크아웃
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           submodules: true
#           fetch-depth: 0

#       - name: Debug submodule URLs
#         run: cat .gitmodules

#       - name: Test submodule access
#         run: |
#           curl -I https://github.com/rlghks-aiofarm/test-repo1.git
#           curl -I https://github.com/rlghks-aiofarm/test-repo2.git

#       - name: Add submodules
#         run: |
#           git submodule add https://github.com/rlghks-aiofarm/test-repo1.git repo1
#           git submodule add https://github.com/rlghks-aiofarm/test-repo2.git repo2

#       - name: Initialize and update submodules
#         run: |
#           git submodule update --init --recursive
#           git submodule status
#           git submodule foreach 'echo $name; git log -1'

#       - name: Verify repo1 and repo2 existence
#         run: |
#           if [ -d "repo1" ]; then echo "repo1 exists"; else exit 1; fi
#           if [ -d "repo2" ]; then echo "repo2 exists"; else exit 1; fi

#       - name: List repo1 contents
#         run: ls -la repo1/

#       - name: List repo2 contents
#         run: ls -la repo2/

#       # Python 설치
#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.8'

#       - name: Find and merge all requirements
#         run: |
#           find . -type f -name "requirements.txt" -exec cat {} + > combined-requirements.txt
#           sort combined-requirements.txt | uniq > combined-requirements-deduped.txt

#       # 의존성 설치 (필요한 경우)
#       - name: Install dependencies
#         run: |
#           pip install -r combined-requirements-deduped.txt

#       # 테스트 실행
#       - name: Run integration tests
#         env:
#           PYTHONPATH: ${{ github.workspace }}/repo1:${{ github.workspace }}/repo2
#         run: python3 -m unittest integration_tests/test_integration.py

name: Kube Test Integration

on:
  push:
    branches:
      - main

jobs:
  integration-test:
    runs-on: ubuntu-latest

    steps:
      # Checkout test-repo1 and test-repo2
      - name: Checkout test-repo1
        uses: actions/checkout@v3
        with:
          repository: rlghks-aiofarm/test-repo1
          submodules: true # 서브모듈 포함
          fetch-depth: 0 # 전체 커밋 히스토리 가져오기
          path: repo1

      - name: Checkout test-repo2
        uses: actions/checkout@v3
        with:
          repository: rlghks-aiofarm/test-repo2
          submodules: true # 서브모듈 포함
          fetch-depth: 0 # 전체 커밋 히스토리 가져오기
          path: repo2

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies for both repos
      - name: Install dependencies for test-repo1
        run: |
          cd repo1
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies for test-repo2
        run: |
          cd repo2
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Run integration tests
      - name: Run integration tests
        run: |
          cd repo1
          python -m unittest discover
          cd ../repo2
          python -m unittest discover

  deploy-if-passed:
    runs-on: ubuntu-latest
    needs: integration-test # 이 job은 이전 job이 성공한 경우에만 실행됩니다.
    if: success()

    steps:
      # Checkout the code again for deployment (just to ensure the latest code)
      - name: Checkout test-repo1 for deployment
        uses: actions/checkout@v3
        with:
          repository: rlghks-aiofarm/test-repo1
          submodules: true # 서브모듈 포함
          fetch-depth: 0 # 전체 커밋 히스토리 가져오기
          path: repo1

      - name: Checkout test-repo2 for deployment
        uses: actions/checkout@v3
        with:
          repository: rlghks-aiofarm/test-repo2
          submodules: true # 서브모듈 포함
          fetch-depth: 0 # 전체 커밋 히스토리 가져오기
          path: repo2

      # Determine which repo was updated and deploy accordingly
      - name: Deploy updated repo1 or repo2
        run: |
          if git diff --quiet origin/main -- 'repo1/'; then
            echo "No changes in repo1, skipping Docker build"
          else
            echo "Changes detected in repo1, building and pushing Docker image"
            docker build -t ${{ secrets.DOCKER_USERNAME }}/test-repo1:latest ./repo1
            docker push ${{ secrets.DOCKER_USERNAME }}/test-repo1:latest
          fi
          if git diff --quiet origin/main -- 'repo2/'; then
            echo "No changes in repo2, skipping Docker build"
          else
            echo "Changes detected in repo2, building and pushing Docker image"
            docker build -t ${{ secrets.DOCKER_USERNAME }}/test-repo2:latest ./repo2
            docker push ${{ secrets.DOCKER_USERNAME }}/test-repo2:latest
          fi
