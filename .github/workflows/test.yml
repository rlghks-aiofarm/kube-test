name: Kube Test Integration

on:
  repository_dispatch:
    types:
      - pr-integration-test

jobs:
  integration-test:
    runs-on: ubuntu-latest

    steps:
      - name: Run Integration Tests
        run: echo "Running integration tests triggered by PR!"

      # Checkout test-repo1 and test-repo2
      - name: Checkout test-repo1
        uses: actions/checkout@v3
        with:
          repository: rlghks-aiofarm/test-repo1
          ref: ${{ github.event.pull_request.head.ref || 'main' }} # PR 브랜치가 없으면 main 사용
          submodules: true # 서브모듈 포함
          fetch-depth: 0 # 전체 커밋 히스토리 가져오기
          path: repo1

      - name: Print PR head ref
        run: echo ${{ github.event.client_payload.pr_ref }}

      - name: Debug pr_ref
        run: echo ${{ github.head_ref }}

      - name: Checkout test-repo2
        uses: actions/checkout@v3
        with:
          repository: rlghks-aiofarm/test-repo2
          ref: ${{ github.event.pull_request.head.ref || 'main' }} # PR 브랜치가 없으면 main 사용
          submodules: true # 서브모듈 포함
          fetch-depth: 0 # 전체 커밋 히스토리 가져오기
          path: repo2

      - name: Print PR head ref
        run: echo ${{ github.event.client_payload.pr_ref }}

      - name: Debug pr_ref
        run: echo ${{ github.head_ref }}

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies for both repos
      - name: Install dependencies for test-repo1
        run: |
          cd repo1
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install dependencies for test-repo2
        run: |
          cd repo2
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Checkout kube-test repo
      - name: Checkout kube-test
        uses: actions/checkout@v3
        with:
          repository: rlghks-aiofarm/kube-test
          path: kube-test

      # Run integration tests
      - name: Run unit tests
        run: |
          cd repo1
          python -m unittest discover || exit 1
          cd ../repo2
          python -m unittest discover || exit 1

      # Add PYTHONPATH
      - name: Add PYTHONPATH
        run: echo "PYTHONPATH=${PYTHONPATH}:${GITHUB_WORKSPACE}/repo2:${GITHUB_WORKSPACE}/repo1" >> $GITHUB_ENV

      - name: List Current Directory
        run: ls -R

      # Run integration tests
      - name: Run integration tests
        run: |
          cd kube-test
          python -m unittest integration_tests.test_integration || exit 1
        env:
          PYTHONPATH: ${{ github.workspace }}
        continue-on-error: false

  deploy-if-passed:
    runs-on: ubuntu-latest
    needs: integration-test # 이 job은 이전 job이 성공한 경우에만 실행됩니다.
    if: success()

    steps:
      # Checkout the code again for deployment (just to ensure the latest code)
      - name: Checkout test-repo1 for deployment
        uses: actions/checkout@v3
        with:
          repository: rlghks-aiofarm/test-repo1
          submodules: true # 서브모듈 포함
          fetch-depth: 0 # 전체 커밋 히스토리 가져오기
          path: repo1

      - name: Checkout test-repo2 for deployment
        uses: actions/checkout@v3
        with:
          repository: rlghks-aiofarm/test-repo2
          submodules: true # 서브모듈 포함
          fetch-depth: 0 # 전체 커밋 히스토리 가져오기
          path: repo2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Determine which repo was updated and deploy accordingly
      - name: Deploy updated repo1 or repo2
        run: |
          if git diff --quiet origin/main -- 'repo1/'; then
            echo "No changes in repo1, skipping Docker build"
          else
            echo "Changes detected in repo1, building and pushing Docker image"
            docker build -t ${{ secrets.DOCKER_USERNAME }}/test-repo1:latest ./repo1
            docker push ${{ secrets.DOCKER_USERNAME }}/test-repo1:latest
          fi
          if git diff --quiet origin/main -- 'repo2/'; then
            echo "No changes in repo2, skipping Docker build"
          else
            echo "Changes detected in repo2, building and pushing Docker image"
            docker build -t ${{ secrets.DOCKER_USERNAME }}/test-repo2:latest ./repo2
            docker push ${{ secrets.DOCKER_USERNAME }}/test-repo2:latest
          fi

      - name: Post Test Results
        if: failure()
        run: |
          echo "Integration test failed. Please check the logs."
